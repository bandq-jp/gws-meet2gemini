diff --git a/backend/.env.example b/backend/.env.example
index 7681680..5da978e 100644
--- a/backend/.env.example
+++ b/backend/.env.example
@@ -21,6 +21,18 @@ GEMINI_API_KEY=your-gemini-api-key
 # または
 # GOOGLE_API_KEY=your-google-api-key
 
+# LLM Provider switch (gemini|openai)
+LLM_PROVIDER=gemini
+
+# OpenAI (Responses API) settings
+OPENAI_API_KEY=your-openai-api-key
+OPENAI_MODEL=gpt-4.1-mini
+# For non-reasoning models only (omit for reasoning models)
+OPENAI_TEMPERATURE=0
+OPENAI_MAX_OUTPUT_TOKENS=4096
+# For reasoning models (e.g., gpt-5-thinking)
+OPENAI_REASONING_EFFORT=medium
+
 # CORS 設定（ローカル開発用、本番では社内ドメインのみ設定）
 CORS_ALLOW_ORIGINS=http://localhost:3000
 
@@ -63,4 +75,4 @@ TASKS_EXPECTED_QUEUE_NAME=
 # TASKS_QUEUE=
 # TASKS_WORKER_URL=https://your-cloud-run-service-url/api/v1/meetings/collect/worker
 # TASKS_OIDC_SERVICE_ACCOUNT=cloud-tasks-invoker@your-gcp-project-id.iam.gserviceaccount.com
-# TASKS_EXPECTED_QUEUE_NAME=
\ No newline at end of file
+# TASKS_EXPECTED_QUEUE_NAME=
diff --git a/backend/app/application/use_cases/extract_structured_data_only.py b/backend/app/application/use_cases/extract_structured_data_only.py
index d8c315c..ee49733 100644
--- a/backend/app/application/use_cases/extract_structured_data_only.py
+++ b/backend/app/application/use_cases/extract_structured_data_only.py
@@ -8,9 +8,8 @@ from app.infrastructure.supabase.repositories.meeting_repository_impl import Mee
 from app.infrastructure.supabase.repositories.structured_repository_impl import StructuredRepositoryImpl
 from app.infrastructure.supabase.repositories.custom_schema_repository_impl import CustomSchemaRepositoryImpl
 from app.infrastructure.supabase.repositories.ai_usage_repository_impl import AiUsageRepositoryImpl
-from app.infrastructure.gemini.structured_extractor import StructuredDataExtractor
+from app.infrastructure import get_llm_extractor
 from app.domain.entities.structured_data import StructuredData
-from app.presentation.api.v1.settings import get_current_gemini_settings
 
 # ログ設定
 logger = logging.getLogger(__name__)
@@ -45,14 +44,8 @@ class ExtractStructuredDataOnlyUseCase:
             if custom_schema:
                 schema_version = f"default-{custom_schema.id}"
         
-        # 現在の設定を取得
-        gemini_settings = get_current_gemini_settings()
-        
-        extractor = StructuredDataExtractor(
-            model=gemini_settings.gemini_model,
-            temperature=gemini_settings.gemini_temperature,
-            max_tokens=gemini_settings.gemini_max_tokens
-        )
+        # LLM抽出器（Gemini/OpenAIを環境変数で切替）
+        extractor = get_llm_extractor()
         
         # Extract agent name for context
         agent_name = meeting.get("organizer_name")
@@ -85,10 +78,20 @@ class ExtractStructuredDataOnlyUseCase:
         # 使用量ログの保存（失敗しても処理は継続）
         try:
             usage_repo = AiUsageRepositoryImpl()
-            usage_repo.insert_many(
-                meeting_id=meeting_id,
-                events=[asdict(event) for event in extractor.usage_events]
-            )
+            # サプライヤ間互換: dataclass/Dictの両方に対応
+            events_payload = []
+            for ev in getattr(extractor, "usage_events", []) or []:
+                try:
+                    from dataclasses import is_dataclass
+
+                    if is_dataclass(ev):
+                        events_payload.append(asdict(ev))
+                    elif isinstance(ev, dict):
+                        events_payload.append(ev)
+                except Exception:
+                    if isinstance(ev, dict):
+                        events_payload.append(ev)
+            usage_repo.insert_many(meeting_id=meeting_id, events=events_payload)
             logger.info(f"AI使用量ログを保存完了: meeting_id={meeting_id}, events_count={len(extractor.usage_events)}")
         except Exception as e:
             logger.warning(f"AI使用量ログ保存に失敗: meeting_id={meeting_id}, error={str(e)}")
@@ -131,4 +134,4 @@ class ExtractStructuredDataOnlyUseCase:
                 logger.warning(f"Group extraction failed for {group_name}: {e}")
                 continue
         
-        return combined_result
\ No newline at end of file
+        return combined_result
diff --git a/backend/app/application/use_cases/process_structured_data.py b/backend/app/application/use_cases/process_structured_data.py
index 91fb155..24b3b53 100644
--- a/backend/app/application/use_cases/process_structured_data.py
+++ b/backend/app/application/use_cases/process_structured_data.py
@@ -8,9 +8,8 @@ from app.infrastructure.supabase.repositories.meeting_repository_impl import Mee
 from app.infrastructure.supabase.repositories.structured_repository_impl import StructuredRepositoryImpl
 from app.infrastructure.supabase.repositories.custom_schema_repository_impl import CustomSchemaRepositoryImpl
 from app.infrastructure.supabase.repositories.ai_usage_repository_impl import AiUsageRepositoryImpl
-from app.infrastructure.gemini.structured_extractor import StructuredDataExtractor
+from app.infrastructure import get_llm_extractor
 from app.domain.entities.structured_data import StructuredData, ZohoCandidateInfo
-from app.presentation.api.v1.settings import get_current_gemini_settings
 from app.infrastructure.zoho.client import ZohoWriteClient, ZohoAuthError, ZohoFieldMappingError
 
 # ログ設定
@@ -51,14 +50,8 @@ class ProcessStructuredDataUseCase:
             if custom_schema:
                 schema_version = f"default-{custom_schema.id}"
         
-        # 現在の設定を取得
-        gemini_settings = get_current_gemini_settings()
-        
-        extractor = StructuredDataExtractor(
-            model=gemini_settings.gemini_model,
-            temperature=gemini_settings.gemini_temperature,
-            max_tokens=gemini_settings.gemini_max_tokens
-        )
+        # LLM抽出器（Gemini/OpenAIを環境変数で切替）
+        extractor = get_llm_extractor()
         # Extract candidate and agent names for better context
         candidate_name = zoho_candidate_name
         agent_name = meeting.get("organizer_name")
@@ -98,10 +91,21 @@ class ProcessStructuredDataUseCase:
         # 使用量ログの保存（失敗しても処理は継続）
         try:
             usage_repo = AiUsageRepositoryImpl()
-            usage_repo.insert_many(
-                meeting_id=meeting_id,
-                events=[asdict(event) for event in extractor.usage_events]
-            )
+            # サプライヤ間互換: dataclass/Dictの両方に対応
+            events_payload = []
+            for ev in getattr(extractor, "usage_events", []) or []:
+                try:
+                    from dataclasses import is_dataclass
+
+                    if is_dataclass(ev):
+                        events_payload.append(asdict(ev))
+                    elif isinstance(ev, dict):
+                        events_payload.append(ev)
+                except Exception:
+                    # 最低限のフォールバック
+                    if isinstance(ev, dict):
+                        events_payload.append(ev)
+            usage_repo.insert_many(meeting_id=meeting_id, events=events_payload)
             logger.info(f"AI使用量ログを保存完了: meeting_id={meeting_id}, events_count={len(extractor.usage_events)}")
         except Exception as e:
             logger.warning(f"AI使用量ログ保存に失敗: meeting_id={meeting_id}, error={str(e)}")
diff --git a/backend/app/infrastructure/__init__.py b/backend/app/infrastructure/__init__.py
index e69de29..13927fb 100644
--- a/backend/app/infrastructure/__init__.py
+++ b/backend/app/infrastructure/__init__.py
@@ -0,0 +1,55 @@
+from __future__ import annotations
+import os
+from typing import Optional
+
+from app.domain.services.llm_extractor_port import LLMExtractorPort
+
+
+def _bool_env(name: str, default: bool = False) -> bool:
+    v = os.getenv(name)
+    if v is None:
+        return default
+    return v.lower() in ("1", "true", "yes", "on")
+
+
+def get_llm_extractor() -> LLMExtractorPort:
+    """Factory returning the configured LLM extractor (OpenAI or Gemini).
+
+    Switch with env var `LLM_PROVIDER` == "openai" | "gemini" (default: gemini).
+    """
+    provider = os.getenv("LLM_PROVIDER", "gemini").lower()
+    if provider == "openai":
+        from app.infrastructure.openai.structured_extractor import (
+            OpenAIStructuredExtractor,
+        )
+
+        model = os.getenv("OPENAI_MODEL", "gpt-4.1-mini")
+        temp_raw: Optional[str] = os.getenv("OPENAI_TEMPERATURE")
+        temperature = float(temp_raw) if temp_raw not in (None, "") else None
+        max_tokens = int(os.getenv("OPENAI_MAX_OUTPUT_TOKENS", "4096"))
+        reasoning_effort = os.getenv("OPENAI_REASONING_EFFORT") or None
+        # Reasoning models generally do not accept temperature. Guard automatically.
+        lower_model = model.lower()
+        if reasoning_effort or ("thinking" in lower_model or lower_model.startswith("o3") or lower_model.startswith("o4")):
+            temperature = None
+        return OpenAIStructuredExtractor(
+            model=model,
+            temperature=temperature,
+            max_output_tokens=max_tokens,
+            reasoning_effort=reasoning_effort,
+        )
+
+    # default to gemini
+    from app.presentation.api.v1.settings import (
+        get_current_gemini_settings,
+    )
+    from app.infrastructure.gemini.structured_extractor import (
+        StructuredDataExtractor as GeminiExtractor,
+    )
+
+    gs = get_current_gemini_settings()
+    return GeminiExtractor(
+        model=gs.gemini_model,
+        temperature=gs.gemini_temperature,
+        max_tokens=gs.gemini_max_tokens,
+    )
diff --git a/backend/app/presentation/api/v1/settings.py b/backend/app/presentation/api/v1/settings.py
index 4dcd2e1..d2352ad 100644
--- a/backend/app/presentation/api/v1/settings.py
+++ b/backend/app/presentation/api/v1/settings.py
@@ -3,6 +3,8 @@ from fastapi import APIRouter, HTTPException
 from pydantic import BaseModel, Field
 
 from app.infrastructure.config.settings import get_settings as get_backend_settings
+import os
+from dataclasses import dataclass
 
 router = APIRouter()
 
@@ -80,3 +82,38 @@ async def get_available_gemini_models():
 def get_current_gemini_settings() -> GeminiSettings:
     """現在のGemini設定を取得（他のモジュールから使用）"""
     return _current_settings["gemini"]
+
+
+# -------- LLM (Provider-agnostic) helpers --------
+
+@dataclass
+class LLMSettings:
+    provider: str
+    model: str
+    temperature: float | None
+    max_output_tokens: int
+    reasoning_effort: str | None
+
+
+def get_current_llm_settings() -> LLMSettings:
+    """環境変数から現在のLLM設定を取得（OpenAI/Gemini切り替え）。"""
+    provider = os.getenv("LLM_PROVIDER", "gemini").lower()
+    if provider == "openai":
+        # OpenAI Responses API models (e.g., gpt-4.1, gpt-4.1-mini, gpt-5-*, ...)
+        temp = os.getenv("OPENAI_TEMPERATURE")
+        return LLMSettings(
+            provider="openai",
+            model=os.getenv("OPENAI_MODEL", "gpt-4.1-mini"),
+            temperature=float(temp) if temp not in (None, "") else None,
+            max_output_tokens=int(os.getenv("OPENAI_MAX_OUTPUT_TOKENS", "4096")),
+            reasoning_effort=os.getenv("OPENAI_REASONING_EFFORT") or None,
+        )
+    # Gemini (backward-compat via current in-memory settings)
+    g = get_current_gemini_settings()
+    return LLMSettings(
+        provider="gemini",
+        model=g.gemini_model,
+        temperature=g.gemini_temperature,
+        max_output_tokens=g.gemini_max_tokens,
+        reasoning_effort=None,
+    )
diff --git a/backend/pyproject.toml b/backend/pyproject.toml
index 624b7a4..d6b8192 100644
--- a/backend/pyproject.toml
+++ b/backend/pyproject.toml
@@ -18,4 +18,5 @@ dependencies = [
     "python-dotenv>=1.1.1",
     "zohocrmsdk8-0>=3.0.0",
     "google-cloud-tasks>=2.19.3",
+    "openai>=1.101.0",
 ]
diff --git a/backend/uv.lock b/backend/uv.lock
index 5eef81a..b572232 100644
--- a/backend/uv.lock
+++ b/backend/uv.lock
@@ -115,6 +115,15 @@ wheels = [
     { url = "https://files.pythonhosted.org/packages/02/c3/253a89ee03fc9b9682f1541728eb66db7db22148cd94f89ab22528cd1e1b/deprecation-2.1.0-py2.py3-none-any.whl", hash = "sha256:a10811591210e1fb0e768a8c25517cabeabcba6f0bf96564f8ff45189f90b14a", size = 11178 },
 ]
 
+[[package]]
+name = "distro"
+version = "1.9.0"
+source = { registry = "https://pypi.org/simple" }
+sdist = { url = "https://files.pythonhosted.org/packages/fc/f8/98eea607f65de6527f8a2e8885fc8015d3e6f5775df186e443e0964a11c3/distro-1.9.0.tar.gz", hash = "sha256:2fa77c6fd8940f116ee1d6b94a2f90b13b5ea8d019b98bc8bafdcabcdd9bdbed", size = 60722 }
+wheels = [
+    { url = "https://files.pythonhosted.org/packages/12/b3/231ffd4ab1fc9d679809f356cebee130ac7daa00d6d6f3206dd4fd137e9e/distro-1.9.0-py3-none-any.whl", hash = "sha256:7bffd925d65168f85027d8da9af6bddab658135b840670a223589bc0c8ef02b2", size = 20277 },
+]
+
 [[package]]
 name = "fastapi"
 version = "0.116.1"
@@ -421,6 +430,7 @@ dependencies = [
     { name = "google-cloud-storage" },
     { name = "google-cloud-tasks" },
     { name = "google-genai" },
+    { name = "openai" },
     { name = "python-dotenv" },
     { name = "supabase" },
     { name = "uvicorn", extra = ["standard"] },
@@ -438,6 +448,7 @@ requires-dist = [
     { name = "google-cloud-storage", specifier = ">=2.18.2" },
     { name = "google-cloud-tasks", specifier = ">=2.19.3" },
     { name = "google-genai", specifier = ">=1.28.0" },
+    { name = "openai", specifier = ">=1.50.0" },
     { name = "python-dotenv", specifier = ">=1.1.1" },
     { name = "supabase", specifier = ">=2.9.0" },
     { name = "uvicorn", extras = ["standard"], specifier = ">=0.30.6" },
@@ -560,6 +571,54 @@ wheels = [
     { url = "https://files.pythonhosted.org/packages/76/c6/c88e154df9c4e1a2a66ccf0005a88dfb2650c1dffb6f5ce603dfbd452ce3/idna-3.10-py3-none-any.whl", hash = "sha256:946d195a0d259cbba61165e88e65941f16e9b36ea6ddb97f00452bae8b1287d3", size = 70442 },
 ]
 
+[[package]]
+name = "jiter"
+version = "0.10.0"
+source = { registry = "https://pypi.org/simple" }
+sdist = { url = "https://files.pythonhosted.org/packages/ee/9d/ae7ddb4b8ab3fb1b51faf4deb36cb48a4fbbd7cb36bad6a5fca4741306f7/jiter-0.10.0.tar.gz", hash = "sha256:07a7142c38aacc85194391108dc91b5b57093c978a9932bd86a36862759d9500", size = 162759 }
+wheels = [
+    { url = "https://files.pythonhosted.org/packages/6d/b5/348b3313c58f5fbfb2194eb4d07e46a35748ba6e5b3b3046143f3040bafa/jiter-0.10.0-cp312-cp312-macosx_10_12_x86_64.whl", hash = "sha256:1e274728e4a5345a6dde2d343c8da018b9d4bd4350f5a472fa91f66fda44911b", size = 312262 },
+    { url = "https://files.pythonhosted.org/packages/9c/4a/6a2397096162b21645162825f058d1709a02965606e537e3304b02742e9b/jiter-0.10.0-cp312-cp312-macosx_11_0_arm64.whl", hash = "sha256:7202ae396446c988cb2a5feb33a543ab2165b786ac97f53b59aafb803fef0744", size = 320124 },
+    { url = "https://files.pythonhosted.org/packages/2a/85/1ce02cade7516b726dd88f59a4ee46914bf79d1676d1228ef2002ed2f1c9/jiter-0.10.0-cp312-cp312-manylinux_2_17_aarch64.manylinux2014_aarch64.whl", hash = "sha256:23ba7722d6748b6920ed02a8f1726fb4b33e0fd2f3f621816a8b486c66410ab2", size = 345330 },
+    { url = "https://files.pythonhosted.org/packages/75/d0/bb6b4f209a77190ce10ea8d7e50bf3725fc16d3372d0a9f11985a2b23eff/jiter-0.10.0-cp312-cp312-manylinux_2_17_armv7l.manylinux2014_armv7l.whl", hash = "sha256:371eab43c0a288537d30e1f0b193bc4eca90439fc08a022dd83e5e07500ed026", size = 369670 },
+    { url = "https://files.pythonhosted.org/packages/a0/f5/a61787da9b8847a601e6827fbc42ecb12be2c925ced3252c8ffcb56afcaf/jiter-0.10.0-cp312-cp312-manylinux_2_17_ppc64le.manylinux2014_ppc64le.whl", hash = "sha256:6c675736059020365cebc845a820214765162728b51ab1e03a1b7b3abb70f74c", size = 489057 },
+    { url = "https://files.pythonhosted.org/packages/12/e4/6f906272810a7b21406c760a53aadbe52e99ee070fc5c0cb191e316de30b/jiter-0.10.0-cp312-cp312-manylinux_2_17_s390x.manylinux2014_s390x.whl", hash = "sha256:0c5867d40ab716e4684858e4887489685968a47e3ba222e44cde6e4a2154f959", size = 389372 },
+    { url = "https://files.pythonhosted.org/packages/e2/ba/77013b0b8ba904bf3762f11e0129b8928bff7f978a81838dfcc958ad5728/jiter-0.10.0-cp312-cp312-manylinux_2_17_x86_64.manylinux2014_x86_64.whl", hash = "sha256:395bb9a26111b60141757d874d27fdea01b17e8fac958b91c20128ba8f4acc8a", size = 352038 },
+    { url = "https://files.pythonhosted.org/packages/67/27/c62568e3ccb03368dbcc44a1ef3a423cb86778a4389e995125d3d1aaa0a4/jiter-0.10.0-cp312-cp312-manylinux_2_5_i686.manylinux1_i686.whl", hash = "sha256:6842184aed5cdb07e0c7e20e5bdcfafe33515ee1741a6835353bb45fe5d1bd95", size = 391538 },
+    { url = "https://files.pythonhosted.org/packages/c0/72/0d6b7e31fc17a8fdce76164884edef0698ba556b8eb0af9546ae1a06b91d/jiter-0.10.0-cp312-cp312-musllinux_1_1_aarch64.whl", hash = "sha256:62755d1bcea9876770d4df713d82606c8c1a3dca88ff39046b85a048566d56ea", size = 523557 },
+    { url = "https://files.pythonhosted.org/packages/2f/09/bc1661fbbcbeb6244bd2904ff3a06f340aa77a2b94e5a7373fd165960ea3/jiter-0.10.0-cp312-cp312-musllinux_1_1_x86_64.whl", hash = "sha256:533efbce2cacec78d5ba73a41756beff8431dfa1694b6346ce7af3a12c42202b", size = 514202 },
+    { url = "https://files.pythonhosted.org/packages/1b/84/5a5d5400e9d4d54b8004c9673bbe4403928a00d28529ff35b19e9d176b19/jiter-0.10.0-cp312-cp312-win32.whl", hash = "sha256:8be921f0cadd245e981b964dfbcd6fd4bc4e254cdc069490416dd7a2632ecc01", size = 211781 },
+    { url = "https://files.pythonhosted.org/packages/9b/52/7ec47455e26f2d6e5f2ea4951a0652c06e5b995c291f723973ae9e724a65/jiter-0.10.0-cp312-cp312-win_amd64.whl", hash = "sha256:a7c7d785ae9dda68c2678532a5a1581347e9c15362ae9f6e68f3fdbfb64f2e49", size = 206176 },
+    { url = "https://files.pythonhosted.org/packages/2e/b0/279597e7a270e8d22623fea6c5d4eeac328e7d95c236ed51a2b884c54f70/jiter-0.10.0-cp313-cp313-macosx_10_12_x86_64.whl", hash = "sha256:e0588107ec8e11b6f5ef0e0d656fb2803ac6cf94a96b2b9fc675c0e3ab5e8644", size = 311617 },
+    { url = "https://files.pythonhosted.org/packages/91/e3/0916334936f356d605f54cc164af4060e3e7094364add445a3bc79335d46/jiter-0.10.0-cp313-cp313-macosx_11_0_arm64.whl", hash = "sha256:cafc4628b616dc32530c20ee53d71589816cf385dd9449633e910d596b1f5c8a", size = 318947 },
+    { url = "https://files.pythonhosted.org/packages/6a/8e/fd94e8c02d0e94539b7d669a7ebbd2776e51f329bb2c84d4385e8063a2ad/jiter-0.10.0-cp313-cp313-manylinux_2_17_aarch64.manylinux2014_aarch64.whl", hash = "sha256:520ef6d981172693786a49ff5b09eda72a42e539f14788124a07530f785c3ad6", size = 344618 },
+    { url = "https://files.pythonhosted.org/packages/6f/b0/f9f0a2ec42c6e9c2e61c327824687f1e2415b767e1089c1d9135f43816bd/jiter-0.10.0-cp313-cp313-manylinux_2_17_armv7l.manylinux2014_armv7l.whl", hash = "sha256:554dedfd05937f8fc45d17ebdf298fe7e0c77458232bcb73d9fbbf4c6455f5b3", size = 368829 },
+    { url = "https://files.pythonhosted.org/packages/e8/57/5bbcd5331910595ad53b9fd0c610392ac68692176f05ae48d6ce5c852967/jiter-0.10.0-cp313-cp313-manylinux_2_17_ppc64le.manylinux2014_ppc64le.whl", hash = "sha256:5bc299da7789deacf95f64052d97f75c16d4fc8c4c214a22bf8d859a4288a1c2", size = 491034 },
+    { url = "https://files.pythonhosted.org/packages/9b/be/c393df00e6e6e9e623a73551774449f2f23b6ec6a502a3297aeeece2c65a/jiter-0.10.0-cp313-cp313-manylinux_2_17_s390x.manylinux2014_s390x.whl", hash = "sha256:5161e201172de298a8a1baad95eb85db4fb90e902353b1f6a41d64ea64644e25", size = 388529 },
+    { url = "https://files.pythonhosted.org/packages/42/3e/df2235c54d365434c7f150b986a6e35f41ebdc2f95acea3036d99613025d/jiter-0.10.0-cp313-cp313-manylinux_2_17_x86_64.manylinux2014_x86_64.whl", hash = "sha256:2e2227db6ba93cb3e2bf67c87e594adde0609f146344e8207e8730364db27041", size = 350671 },
+    { url = "https://files.pythonhosted.org/packages/c6/77/71b0b24cbcc28f55ab4dbfe029f9a5b73aeadaba677843fc6dc9ed2b1d0a/jiter-0.10.0-cp313-cp313-manylinux_2_5_i686.manylinux1_i686.whl", hash = "sha256:15acb267ea5e2c64515574b06a8bf393fbfee6a50eb1673614aa45f4613c0cca", size = 390864 },
+    { url = "https://files.pythonhosted.org/packages/6a/d3/ef774b6969b9b6178e1d1e7a89a3bd37d241f3d3ec5f8deb37bbd203714a/jiter-0.10.0-cp313-cp313-musllinux_1_1_aarch64.whl", hash = "sha256:901b92f2e2947dc6dfcb52fd624453862e16665ea909a08398dde19c0731b7f4", size = 522989 },
+    { url = "https://files.pythonhosted.org/packages/0c/41/9becdb1d8dd5d854142f45a9d71949ed7e87a8e312b0bede2de849388cb9/jiter-0.10.0-cp313-cp313-musllinux_1_1_x86_64.whl", hash = "sha256:d0cb9a125d5a3ec971a094a845eadde2db0de85b33c9f13eb94a0c63d463879e", size = 513495 },
+    { url = "https://files.pythonhosted.org/packages/9c/36/3468e5a18238bdedae7c4d19461265b5e9b8e288d3f86cd89d00cbb48686/jiter-0.10.0-cp313-cp313-win32.whl", hash = "sha256:48a403277ad1ee208fb930bdf91745e4d2d6e47253eedc96e2559d1e6527006d", size = 211289 },
+    { url = "https://files.pythonhosted.org/packages/7e/07/1c96b623128bcb913706e294adb5f768fb7baf8db5e1338ce7b4ee8c78ef/jiter-0.10.0-cp313-cp313-win_amd64.whl", hash = "sha256:75f9eb72ecb640619c29bf714e78c9c46c9c4eaafd644bf78577ede459f330d4", size = 205074 },
+    { url = "https://files.pythonhosted.org/packages/54/46/caa2c1342655f57d8f0f2519774c6d67132205909c65e9aa8255e1d7b4f4/jiter-0.10.0-cp313-cp313t-macosx_11_0_arm64.whl", hash = "sha256:28ed2a4c05a1f32ef0e1d24c2611330219fed727dae01789f4a335617634b1ca", size = 318225 },
+    { url = "https://files.pythonhosted.org/packages/43/84/c7d44c75767e18946219ba2d703a5a32ab37b0bc21886a97bc6062e4da42/jiter-0.10.0-cp313-cp313t-manylinux_2_17_x86_64.manylinux2014_x86_64.whl", hash = "sha256:14a4c418b1ec86a195f1ca69da8b23e8926c752b685af665ce30777233dfe070", size = 350235 },
+    { url = "https://files.pythonhosted.org/packages/01/16/f5a0135ccd968b480daad0e6ab34b0c7c5ba3bc447e5088152696140dcb3/jiter-0.10.0-cp313-cp313t-win_amd64.whl", hash = "sha256:d7bfed2fe1fe0e4dda6ef682cee888ba444b21e7a6553e03252e4feb6cf0adca", size = 207278 },
+    { url = "https://files.pythonhosted.org/packages/1c/9b/1d646da42c3de6c2188fdaa15bce8ecb22b635904fc68be025e21249ba44/jiter-0.10.0-cp314-cp314-macosx_10_12_x86_64.whl", hash = "sha256:5e9251a5e83fab8d87799d3e1a46cb4b7f2919b895c6f4483629ed2446f66522", size = 310866 },
+    { url = "https://files.pythonhosted.org/packages/ad/0e/26538b158e8a7c7987e94e7aeb2999e2e82b1f9d2e1f6e9874ddf71ebda0/jiter-0.10.0-cp314-cp314-macosx_11_0_arm64.whl", hash = "sha256:023aa0204126fe5b87ccbcd75c8a0d0261b9abdbbf46d55e7ae9f8e22424eeb8", size = 318772 },
+    { url = "https://files.pythonhosted.org/packages/7b/fb/d302893151caa1c2636d6574d213e4b34e31fd077af6050a9c5cbb42f6fb/jiter-0.10.0-cp314-cp314-manylinux_2_17_aarch64.manylinux2014_aarch64.whl", hash = "sha256:3c189c4f1779c05f75fc17c0c1267594ed918996a231593a21a5ca5438445216", size = 344534 },
+    { url = "https://files.pythonhosted.org/packages/01/d8/5780b64a149d74e347c5128d82176eb1e3241b1391ac07935693466d6219/jiter-0.10.0-cp314-cp314-manylinux_2_17_armv7l.manylinux2014_armv7l.whl", hash = "sha256:15720084d90d1098ca0229352607cd68256c76991f6b374af96f36920eae13c4", size = 369087 },
+    { url = "https://files.pythonhosted.org/packages/e8/5b/f235a1437445160e777544f3ade57544daf96ba7e96c1a5b24a6f7ac7004/jiter-0.10.0-cp314-cp314-manylinux_2_17_ppc64le.manylinux2014_ppc64le.whl", hash = "sha256:e4f2fb68e5f1cfee30e2b2a09549a00683e0fde4c6a2ab88c94072fc33cb7426", size = 490694 },
+    { url = "https://files.pythonhosted.org/packages/85/a9/9c3d4617caa2ff89cf61b41e83820c27ebb3f7b5fae8a72901e8cd6ff9be/jiter-0.10.0-cp314-cp314-manylinux_2_17_s390x.manylinux2014_s390x.whl", hash = "sha256:ce541693355fc6da424c08b7edf39a2895f58d6ea17d92cc2b168d20907dee12", size = 388992 },
+    { url = "https://files.pythonhosted.org/packages/68/b1/344fd14049ba5c94526540af7eb661871f9c54d5f5601ff41a959b9a0bbd/jiter-0.10.0-cp314-cp314-manylinux_2_17_x86_64.manylinux2014_x86_64.whl", hash = "sha256:31c50c40272e189d50006ad5c73883caabb73d4e9748a688b216e85a9a9ca3b9", size = 351723 },
+    { url = "https://files.pythonhosted.org/packages/41/89/4c0e345041186f82a31aee7b9d4219a910df672b9fef26f129f0cda07a29/jiter-0.10.0-cp314-cp314-manylinux_2_5_i686.manylinux1_i686.whl", hash = "sha256:fa3402a2ff9815960e0372a47b75c76979d74402448509ccd49a275fa983ef8a", size = 392215 },
+    { url = "https://files.pythonhosted.org/packages/55/58/ee607863e18d3f895feb802154a2177d7e823a7103f000df182e0f718b38/jiter-0.10.0-cp314-cp314-musllinux_1_1_aarch64.whl", hash = "sha256:1956f934dca32d7bb647ea21d06d93ca40868b505c228556d3373cbd255ce853", size = 522762 },
+    { url = "https://files.pythonhosted.org/packages/15/d0/9123fb41825490d16929e73c212de9a42913d68324a8ce3c8476cae7ac9d/jiter-0.10.0-cp314-cp314-musllinux_1_1_x86_64.whl", hash = "sha256:fcedb049bdfc555e261d6f65a6abe1d5ad68825b7202ccb9692636c70fcced86", size = 513427 },
+    { url = "https://files.pythonhosted.org/packages/d8/b3/2bd02071c5a2430d0b70403a34411fc519c2f227da7b03da9ba6a956f931/jiter-0.10.0-cp314-cp314-win32.whl", hash = "sha256:ac509f7eccca54b2a29daeb516fb95b6f0bd0d0d8084efaf8ed5dfc7b9f0b357", size = 210127 },
+    { url = "https://files.pythonhosted.org/packages/03/0c/5fe86614ea050c3ecd728ab4035534387cd41e7c1855ef6c031f1ca93e3f/jiter-0.10.0-cp314-cp314t-macosx_11_0_arm64.whl", hash = "sha256:5ed975b83a2b8639356151cef5c0d597c68376fc4922b45d0eb384ac058cfa00", size = 318527 },
+    { url = "https://files.pythonhosted.org/packages/b3/4a/4175a563579e884192ba6e81725fc0448b042024419be8d83aa8a80a3f44/jiter-0.10.0-cp314-cp314t-manylinux_2_17_x86_64.manylinux2014_x86_64.whl", hash = "sha256:3aa96f2abba33dc77f79b4cf791840230375f9534e5fac927ccceb58c5e604a5", size = 354213 },
+]
+
 [[package]]
 name = "mysql-connector-python"
 version = "9.4.0"
@@ -588,6 +647,25 @@ wheels = [
     { url = "https://files.pythonhosted.org/packages/be/9c/92789c596b8df838baa98fa71844d84283302f7604ed565dafe5a6b5041a/oauthlib-3.3.1-py3-none-any.whl", hash = "sha256:88119c938d2b8fb88561af5f6ee0eec8cc8d552b7bb1f712743136eb7523b7a1", size = 160065 },
 ]
 
+[[package]]
+name = "openai"
+version = "1.102.0"
+source = { registry = "https://pypi.org/simple" }
+dependencies = [
+    { name = "anyio" },
+    { name = "distro" },
+    { name = "httpx" },
+    { name = "jiter" },
+    { name = "pydantic" },
+    { name = "sniffio" },
+    { name = "tqdm" },
+    { name = "typing-extensions" },
+]
+sdist = { url = "https://files.pythonhosted.org/packages/07/55/da5598ed5c6bdd9939633854049cddc5cbac0da938dfcfcb3c6b119c16c0/openai-1.102.0.tar.gz", hash = "sha256:2e0153bcd64a6523071e90211cbfca1f2bbc5ceedd0993ba932a5869f93b7fc9", size = 519027 }
+wheels = [
+    { url = "https://files.pythonhosted.org/packages/bd/0d/c9e7016d82c53c5b5e23e2bad36daebb8921ed44f69c0a985c6529a35106/openai-1.102.0-py3-none-any.whl", hash = "sha256:d751a7e95e222b5325306362ad02a7aa96e1fab3ed05b5888ce1c7ca63451345", size = 812015 },
+]
+
 [[package]]
 name = "packaging"
 version = "25.0"
@@ -936,6 +1014,18 @@ wheels = [
     { url = "https://files.pythonhosted.org/packages/d2/3f/8ba87d9e287b9d385a02a7114ddcef61b26f86411e121c9003eb509a1773/tenacity-8.5.0-py3-none-any.whl", hash = "sha256:b594c2a5945830c267ce6b79a166228323ed52718f30302c1359836112346687", size = 28165 },
 ]
 
+[[package]]
+name = "tqdm"
+version = "4.67.1"
+source = { registry = "https://pypi.org/simple" }
+dependencies = [
+    { name = "colorama", marker = "sys_platform == 'win32'" },
+]
+sdist = { url = "https://files.pythonhosted.org/packages/a8/4b/29b4ef32e036bb34e4ab51796dd745cdba7ed47ad142a9f4a1eb8e0c744d/tqdm-4.67.1.tar.gz", hash = "sha256:f8aef9c52c08c13a65f30ea34f4e5aac3fd1a34959879d7e59e63027286627f2", size = 169737 }
+wheels = [
+    { url = "https://files.pythonhosted.org/packages/d0/30/dc54f88dd4a2b5dc8a0279bdd7270e735851848b762aeb1c1184ed1f6b14/tqdm-4.67.1-py3-none-any.whl", hash = "sha256:26445eca388f82e72884e0d580d5464cd801a3ea01e63e5601bdff9ba6a48de2", size = 78540 },
+]
+
 [[package]]
 name = "typing-extensions"
 version = "4.14.1"
